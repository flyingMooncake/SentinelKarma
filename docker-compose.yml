services:
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: sentinelkarma-mosquitto-1
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./data/mosquitto_logs:/mosquitto/log
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_sub -h localhost -t '$$SYS/broker/uptime' -C 1 -W 3 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5

  agent:
    build: ./agent-python
    image: sentinelkarma-agent
    container_name: sentinel-agent
    restart: unless-stopped
    environment:
      MQTT_HOST: mosquitto
      MQTT_PORT: "1883"
      MQTT_TOPIC: sentinel/diag
      LOG_PATH: /data/rpc.jsonl
      REGION: eu-central
      ASN: "64512"
      WINDOW_MS: "250"
      Z_THRESHOLD: "3.0"
      METHODS_HEAVY: getProgramAccounts,getLogs
      SALT: change-me
    volumes:
      - ./data:/data
    depends_on:
      mosquitto:
        condition: service_healthy
    # (opțional) healthcheck simplu - verifică TCP către broker
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('mosquitto',1883)); s.close()"]
      interval: 30s
      timeout: 3s
      retries: 3

      
  generator:
    build: ./agent-python
    container_name: traffic-gen
    command: ["python","-m","tools.generator","--log","/data/rpc.jsonl","--rate","600","--burst","getProgramAccounts","--err","0.10","--burst_secs","15","--stdout"]
    volumes:
      - ./data:/data
      - ./data/generator_out:/data/generator_out
    depends_on: [agent]

  saver:
    build: ./agent-python
    image: sentinelkarma-saver
    container_name: log-saver
    command: ["python","-m","tools.saver"]
    env_file:
      - ./infra/saver.env
    environment:
      MQTT_URL: mqtt://mosquitto:1883
      NORMAL_DIR: /data/logs_normal
      MALICIOUS_DIR: /data/malicious_logs

      # rotații
      NORMAL_ROTATE_SECS: "1800"         # 30 min
      MALICIOUS_ROTATE_SECS: "30"        # 30 seconds - generates contract files every 30s

      # retenție
      NORMAL_TTL_MINS: "120"             # 2 ore (poți pune "60" pt 1 oră sau "30" pt jumate)
      MALICIOUS_TTL_MINS: "0"            # 0 = nu șterge automat

      Z_THRESHOLD: "3.0"
    volumes:
      - ./data/logs_normal:/data/logs_normal
      - ./data/malicious_logs:/data/malicious_logs
      - ./data/contract_data:/data/contract_data
    depends_on:
      mosquitto:
        condition: service_healthy

  log-server:
    build: ./infra/log-server
    image: sentinelkarma-log-server
    container_name: sentinel-log-server
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      SERVER_HOST: "0.0.0.0"
      SERVER_PORT: "9000"
      LOGS_DIR: /data/logs
      CONTRACT_DIR: /data/contract_data
      AUTHORIZED_PEERS_FILE: /data/authorized_peers.txt
      MY_PEER_URL: "${MY_PEER_URL:-http://localhost:9000}"
      MAX_LOG_SIZE: "10485760"  # 10MB
      MAX_STORAGE: "1073741824"  # 1GB
    volumes:
      - ./data/logs:/data/logs
      - ./data/contract_data:/data/contract_data:ro
      - ./data/authorized_peers.txt:/data/authorized_peers.txt:ro
      - ./data/malicious_logs:/data/malicious_logs:ro
      - ./scripts:/app/scripts:ro
      - ~/.config/solana:/root/.config/solana:ro
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:9000/health')"]
      interval: 30s
      timeout: 5s
      retries: 3

  nft-sync:
    build: ./agent-python
    image: sentinelkarma-agent
    container_name: nft-sync-daemon
    restart: unless-stopped
    command: ["python3", "/app/nft_sync_daemon.py"]
    volumes:
      - ./scripts/nft_sync_daemon.py:/app/nft_sync_daemon.py:ro
      - ./nft_mappings.json:/home/water/SentinelKarma/nft_mappings.json
      - ~/.config/solana:/root/.config/solana:ro
    environment:
      SOLANA_RPC_URL: "http://host.docker.internal:8899"
    network_mode: host

  web:
    build: ./app
    image: sentinelkarma-web
    container_name: sentinel-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: "${API_URL:-http://localhost:9000}"
      REACT_APP_WS_URL: "${WS_URL:-ws://localhost:9001}"
    volumes:
      - ./nft_mappings.json:/usr/share/nginx/html/nft_mappings.json:ro
      - ./data/malicious_logs:/usr/share/nginx/html/data/malicious_logs:ro
    depends_on:
      - mosquitto
      - log-server
      - nft-sync
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 3
